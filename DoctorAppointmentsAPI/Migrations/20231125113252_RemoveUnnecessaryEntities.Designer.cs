// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories;

#nullable disable

namespace DoctorAppointmentsAPI.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20231125113252_RemoveUnnecessaryEntities")]
    partial class RemoveUnnecessaryEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Models.AppointmentMedications", b =>
                {
                    b.Property<int>("MedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationId"), 1L, 1);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsageInstructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicationId");

                    b.HasIndex("AppointmentId");

                    b.ToTable("AppointmentsMedications");
                });

            modelBuilder.Entity("Entities.Models.Appointments", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"), 1L, 1);

                    b.Property<string>("AppointmentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AppointmentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("AppointmentId");

                    b.HasIndex("AppointmentCode")
                        .IsUnique();

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Entities.Models.Doctors", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"), 1L, 1);

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorSpecialityId")
                        .HasColumnType("int");

                    b.Property<string>("DoctorSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorId");

                    b.HasIndex("DoctorSpecialityId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Entities.Models.DoctorSpecialties", b =>
                {
                    b.Property<int>("DoctorSpecialityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorSpecialityId"), 1L, 1);

                    b.Property<string>("DoctorSpecialtyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorSpecialityId");

                    b.ToTable("DoctorSpecialties");
                });

            modelBuilder.Entity("Entities.Models.FamilyDoctorChanges", b =>
                {
                    b.Property<int>("ChangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChangeId"), 1L, 1);

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewFamilyDoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousFamilyDoctorId")
                        .HasColumnType("int");

                    b.HasKey("ChangeId");

                    b.HasIndex("NewFamilyDoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PreviousFamilyDoctorId");

                    b.ToTable("FamilyDoctorChanges");
                });

            modelBuilder.Entity("Entities.Models.Patients", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"), 1L, 1);

                    b.Property<DateTime>("PatientBirthDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PatientFamilyDoctorAppointDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PatientFamilyDoctorId")
                        .HasColumnType("int");

                    b.Property<string>("PatientGender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.HasIndex("PatientFamilyDoctorId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Entities.Models.AppointmentMedications", b =>
                {
                    b.HasOne("Entities.Models.Appointments", "Appointment")
                        .WithMany("Medications")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Entities.Models.Appointments", b =>
                {
                    b.HasOne("Entities.Models.Doctors", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.Patients", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Entities.Models.Doctors", b =>
                {
                    b.HasOne("Entities.Models.DoctorSpecialties", "DoctorSpeciality")
                        .WithMany()
                        .HasForeignKey("DoctorSpecialityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DoctorSpeciality");
                });

            modelBuilder.Entity("Entities.Models.FamilyDoctorChanges", b =>
                {
                    b.HasOne("Entities.Models.Doctors", "NewFamilyDoctor")
                        .WithMany()
                        .HasForeignKey("NewFamilyDoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.Patients", "Patient")
                        .WithMany("FamilyDoctorChanges")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.Doctors", "PreviousFamilyDoctor")
                        .WithMany()
                        .HasForeignKey("PreviousFamilyDoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("NewFamilyDoctor");

                    b.Navigation("Patient");

                    b.Navigation("PreviousFamilyDoctor");
                });

            modelBuilder.Entity("Entities.Models.Patients", b =>
                {
                    b.HasOne("Entities.Models.Doctors", "FamilyDoctor")
                        .WithMany()
                        .HasForeignKey("PatientFamilyDoctorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("FamilyDoctor");
                });

            modelBuilder.Entity("Entities.Models.Appointments", b =>
                {
                    b.Navigation("Medications");
                });

            modelBuilder.Entity("Entities.Models.Doctors", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Entities.Models.Patients", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("FamilyDoctorChanges");
                });
#pragma warning restore 612, 618
        }
    }
}
